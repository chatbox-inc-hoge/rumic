<?php
/**
 * Created by PhpStorm.
 * User: mkkn
 * Date: 2015/04/16
 * Time: 7:10
 */

namespace Chatbox\Rumic;

use Laravel\Lumen\Application as Lumen;
use Dotenv;

/**
 * TODO
 *
 * base dir 関連
 *
 * Class Application
 * @package Chatbox\Rumic
 *
 */
class Application extends Lumen{

    public function __construct()
    {
        parent::__construct();
//        $this->singleton(
//            'Illuminate\Contracts\Debug\ExceptionHandler',
//            'App\Exceptions\Handler'
//        );
//
//        $this->singleton(
//            'Illuminate\Contracts\Console\Kernel',
//            'App\Console\Kernel'
//        );
// $app->middleware([
//     // 'Illuminate\Cookie\Middleware\EncryptCookies',
//     // 'Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse',
//     // 'Illuminate\Session\Middleware\StartSession',
//     // 'Illuminate\View\Middleware\ShareErrorsFromSession',
//     // 'Laravel\Lumen\Http\Middleware\VerifyCsrfToken',
// ]);

// $app->routeMiddleware([

// ]);
// $app->register('App\Providers\AppServiceProvider');
    }

    public function configure($config=[]){
        $methods = ["bind","middleware","routeMiddelware","register"];

        foreach($methods as $method){
            if(isset($config[$method])){
                if(is_array($config[$method])){
                    foreach($config[$method] as $params){
//                        var_dump($method,$params);
                        if(!is_array($params) || count($params) === 1){
                            call_user_func([$this,$method],$params);
                        }else{
                            call_user_func_array([$this,$method],$params);
                        }
                    }
                }else{
                    throw new \DomainException("each rumic configuration must be array");
                }
            }
        }
    }

    protected function registerImplements(array $config){
        foreach($config as $value){
            $value = $value + [null,null,true];
            list($abstract,$concrete,$shared) = $value;
            $this->bind($abstract,$concrete,$shared);
        }
    }

    protected function addRoute($method, $uri, $action)
    {
        if (is_array($this->groupAttributes) && isset($this->groupAttributes["mount"])) {
        }

        parent::addRoute($method, $uri, $action); // TODO: Change the autogenerated stub
    }


    public function loadEnv($dir){
        Dotenv::load($dir);
    }
}